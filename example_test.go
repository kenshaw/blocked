package blocked_test

import (
	"bytes"
	"fmt"
	"math/rand"
	"strings"

	"github.com/kenshaw/blocked"
)

func Example() {
	for i, seed := range []int{
		999,
		4000,
		12555,
	} {
		if i != 0 {
			fmt.Println()
		}

		// create random data
		r := rand.New(rand.NewSource(int64(seed)))
		height := 1 + r.Intn(12)
		data := make([]uint64, height)
		for i := range height {
			data[i] = r.Uint64()
		}

		// create bitmap from data, using 64 bits per line (the width of
		// uint64)
		img, err := blocked.New(data, 64)
		if err != nil {
			panic(err)
		}

		// note: to interpret data as 46 bits wide (or another bit width) do
		// the following:
		//
		// img, err := blocked.New(data, 46)

		// encode as blocks and display
		for j, typ := range []blocked.Type{
			blocked.Solids,
			blocked.Halves,
			blocked.Sextants,
			blocked.Octants,
			blocked.Braille,
		} {
			if j != 0 {
				fmt.Println()
			}
			fmt.Printf("%d%c. %s:\n", i+1, 'a'+j, typ)
			var buf bytes.Buffer
			if err := img.Encode(&buf, typ); err != nil {
				panic(err)
			}

			// usually this would suffice:
			// fmt.Println(buf.String())

			// to work around with comment formatting issues in Go examples,
			// add pipes to surround the data:
			s := "|" + strings.ReplaceAll(buf.String(), "\n", "|\n|") + "|"
			fmt.Println(s)
		}
	}
	// Output:
	// 1a. Solids:
	// |██  ██████  ██ █ █ ██  ██ █    █ ██ █  █  ██ █ █  █    ███ █████|
	//
	// 1b. Halves:
	// |▀▀  ▀▀▀▀▀▀  ▀▀ ▀ ▀ ▀▀  ▀▀ ▀    ▀ ▀▀ ▀  ▀  ▀▀ ▀ ▀  ▀    ▀▀▀ ▀▀▀▀▀|
	//
	// 1c. Sextants:
	// |🬂 🬂🬂🬂 🬂🬁🬁🬁🬀🬁🬀🬀 🬁🬁🬀🬀🬁 🬂🬁🬁 🬀 🬁🬂🬁🬂🬂|
	//
	// 1d. Octants:
	// |🮂 🮂🮂🮂 🮂𜺫𜺫𜺫𜺨𜺫𜺨𜺨 𜺫𜺫𜺨𜺨𜺫 🮂𜺫𜺫 𜺨 𜺫🮂𜺫🮂🮂|
	//
	// 1e. Braille:
	// |⠉⠀⠉⠉⠉⠀⠉⠈⠈⠈⠁⠈⠁⠁⠀⠈⠈⠁⠁⠈⠀⠉⠈⠈⠀⠁⠀⠈⠉⠈⠉⠉|
	//
	// 2a. Solids:
	// |█████  ████ █  █ █ █    █   █    █████ █  █ █ █   ███ ████ █ ███|
	// | ██ ██ ██   ██ █     █   █   ███    █   █ █  ███ ██ ██    ██   █|
	// |█  █ ███ ████ ██  █  █ ██ █ █    ██ █  ██   ██ ████ ██  █ █   █ |
	// |███    █  ██ ████   ███ █     █ █ ███ ███ █      ███  █     ███ |
	// | ████  ███  █ █  ██ █   █ █  ████ █ ███ █ █████      █ ████ ██ █|
	// |  █     █ █    ███ █  ██     █ █ ██ █████        █  ████  █ ██  |
	//
	// 2b. Halves:
	// |▀██▀█▄ ██▀▀ █▄ █ ▀ ▀ ▄  ▀▄  ▀▄▄▄ ▀▀▀█▀ ▀▄ █ ▀▄█▄ ▄█▀█▄▀▀▀▀▄█ ▀▀█|
	// |█▄▄▀ ▀▀█ ▀██▀▄██▄ ▀ ▄█▄▀█ ▀ ▀ ▄ ▄▀█▄█ ▄██ ▄ ▀▀ ▀▀██▄▀▀▄ ▀ ▀ ▄▄█ |
	// | ▀█▀▀  ▀█▀▄ ▀ ▀▄▄█▀▄▀ ▄▄▀ ▀  █▀█▀▄█ ███▄█ ▀▀▀▀▀  ▄  ▄█▄█▀▀█ ██ ▀|
	//
	// 2c. Sextants:
	// |🬙🬥🬪🬷🬥🬮🬛🬷🬁🬑🬦🬞🬗🬏🬗🬋🬠🬒🬕🬠🬓🬄🬶🬪🬵🬕🬺🬂🬒🬜🬁🬙|
	// |🬊🬛🬃🬉🬚🬒🬅🬥🬶🬢🬆🬮🬄🬃🬦🬪🬣🬕🬺🬴▌🬌🬋🬃🬠🬂🬵🬶🬋🬓█🬈|
	//
	// 2d. Octants:
	// |𜷆𜵘𜴤𜶦𜴟𜷛𜶍▟𜴷𜴋𜷓𜵑𜵌𜴉𜴑𜵁𜵓𜶾𜵊𜷍𜵈𜴺𜴰𜴤𜶤𜷂𜴴𜴸𜴌𜴖𜶭𜵍|
	// |𜺫𜴂𜺨𜺫𜴂𜴀𜺨𜴄𜴈𜴄𜺨𜴆𜺨𜺨▝𜴅𜴄▘▀𜴇▘🮂🮂𜺨𜴃 𜴈𜴈🮂▘▀𜺫|
	//
	// 2e. Braille:
	// |⣝⡫⠳⢼⠫⣥⢗⣼⡈⠌⣰⡠⡕⠄⠕⡒⡨⣍⡏⣨⡆⡃⠵⠳⢴⣏⠷⡉⠍⠞⣈⡝|
	// |⠈⠋⠁⠈⠋⠂⠁⠑⠚⠑⠁⠒⠁⠁⠘⠙⠑⠃⠛⠓⠃⠉⠉⠁⠐⠀⠚⠚⠉⠃⠛⠈|
	//
	// 3a. Solids:
	// |█   █  ██  ██    █ ██ █   █ ██ █ █     ██  █ █ ██ █ █  ████   ██|
	// |███ ██ █  █   ██ █  ███     █ █ ███    ████ ██ ███ ███  ██      |
	// | █ █ █ █  █  ██ █ ███ █  █   █ █ █  ██ █  ████████    ██ ███   █|
	// |█ ██   █ ███    ██ █      ████ ██  █ ███ █    ███  ██  ████ ███ |
	// | ██   ██ ██  ██ █  ██  █       ██ ██ █ █ ██  █   ████ █ █  █  █ |
	// |█ █ ██ █ ███  ██ █ ███ █ █ █ █ ████   ██     █ ██ █   ███  █ ███|
	// | █   ████  █  ███ █ ██    ██ ██ ████ █   ██  █   █ ███ ██      █|
	// | █  █████████ █    █  █  ██ █ █      █     ███ █  █ █  █ █    █ |
	// |█ █ █ █ ████ ██  █ ███ █  ██      █     ████   ██  ████ ██  ██  |
	// | █ ████  █ ████ █ ██ ███  █  █ █  ████  █       █ ██    ███  ███|
	// | █  █    █ █  █ █  █    █         ███  █  █    █    █  █   █ ██ |
	// |█    █ █ ██    █ ███ ███ █   ██      █  ████ █ █  ██ ███ ███ █ █|
	//
	// 3b. Halves:
	// |█▄▄ █▄ █▀ ▄▀▀ ▄▄ █ ▀█▄█   ▀ █▀▄▀▄█▄    ██▄▄▀▄█ ██▄▀▄█▄ ▀██▀   ▀▀|
	// |▄▀▄█ ▀ █ ▄█▄ ▀▀ █▄▀█▀ ▀  ▀▄▄▄█ █▄▀ ▄▀█▄█ ▄▀▀▀▀███▀ ▄▄ ▀█▄██▀▄▄▄▀|
	// |▄▀█ ▄▄▀█ ██▄ ▀█▄▀▄ ██▄ █ ▄ ▄ ▄ ██▄█▀ ▀▄█ ▀▀  █ ▄▄▀█▀▀ █▄█  █ ▄█▄|
	// | █  ▄████▄▄█▄ █▀▀ ▀▄▀▀▄  ▄█▀▄▀█ ▀▀▀▀ █   ▀▀▄▄█ ▄ ▀▄▀█▀ █▀▄    ▄▀|
	// |▀▄▀▄█▄█ ▀█▀█▄██ ▄▀▄█▀█▄█  █▀ ▄ ▄  █▄▄▄  █▀▀▀   ▀█ ▄█▀▀▀ ██▄ ▀█▄▄|
	// |▄▀  ▀▄ ▄ █▄▀  ▀▄▀▄▄█ ▄▄▄▀▄   ▄▄   ▀▀▀▄ ▀▄▄█▄ ▄ █  ▄▄▀▄▄█ ▄▄█ █▀▄|
	//
	// 3c. Sextants:
	// |🬪🬢🬪▐🬀🬔🬟🬚🬘🬯🬛▌🬞🬀🬥🬤🬫🬃🬭▐🬌🬳🬻🬷🬺🬈🬌🬯🬬🬮 🬡|
	// |🬗🬕🬭🬫▐🬴🬇🬱🬥▐🬱🬦🬞🬡🬡▐🬲🬜🬉🬸🬉🬃🬦🬡🬗🬜🬄🬳🬕🬧🬡🬲|
	// |🬘🬏🬜🬝🬺🬻🬢🬕🬟🬧🬰🬢🬇🬴🬅🬄🬂🬒🬉 🬯🬶🬍🬦🬑🬤🬴🬘🬶 🬭🬅|
	// |🬘🬁🬥🬟▐🬘🬂🬣🬣🬸🬠🬰🬢🬀🬠🬑 🬎🬥🬇🬮🬱🬞🬦🬀🬰🬢🬵🬡🬶▐🬥|
	//
	// 3d. Octants:
	// |𜵞𜷏𜴤▐𜵱𜷁𜴙𜴔𜷅𜶞𜴕𜴍𜴘𜶬𜷒𜶔𜵟𜵴𜶜𜷕𜵽𜴭𜴵▟𜵮𜵹𜵂𜶞𜷚𜵢▂𜵔|
	// |𜶔▘𜷗𜷣𜷅𜷘𜴷𜵮𜴑𜶊𜴴𜴿𜵸𜵩𜵙▞𜴴𜴮𜶑𜴈𜴚𜶁𜷕𜵸𜴞𜵘𜵢𜶚𜶅▝𜴃𜵞|
	// |𜵚𜴄𜶍𜵵𜶘𜵜𜴈𜶅𜶆𜷙𜵻𜶹𜶀𜴂𜵸𜴽 𜴴𜶌𜴘𜶲𜶾𜺠𜶑▘𜶹𜶃𜷌𜵿𜷏𜶘𜶌|
	//
	// 3e. Braille:
	// |⡳⣢⠳⢸⢁⣎⠡⠖⣜⢬⠗⠇⠠⣁⣫⢪⡺⢂⢤⣸⢓⠮⠾⣼⡷⢑⡓⢬⣻⡥⣀⡩|
	// |⢪⠃⣲⣽⣜⣳⡈⡷⠕⢜⠷⡘⢐⡴⡰⡜⠷⠯⢨⠚⠨⢅⣸⢐⠪⡫⡥⢳⢇⠘⠐⡳|
	// |⡱⠑⢗⢃⢹⡹⠚⢇⢎⣺⢙⣚⢄⠋⢐⡐⠀⠷⢖⠠⣋⣍⢀⢨⠃⣚⢍⣡⢛⣢⢹⢖|
}
